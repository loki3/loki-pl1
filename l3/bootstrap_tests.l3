// unittests for bootstrap.l3

:(		@unittest func()
	14 assert=? ( 4 + 3 ) * 2
	10 assert=? 4 + ( 3 * 2 )

:[		@unittest func()
	:array assert=? l3.getType { :value [ 1 2 ] }
	4 assert=? l3.getCount [ 3 4 5 6 ]

:{		@unittest func()
	:map assert=? l3.getType { :value { :a 1 :b 2 } }
	2 assert=? l3.getCount { :a 1 :b 2 }

://		@unittest func()
	// assertTrue? false
	true

:`		@unittest func()
	8 assert=? l3.eval ` 5 + 3 `

:/(		@unittest func()
	10 assert=? 4 + /( 3 * 2

:/[		@unittest func()
	3 assert=? l3.getCount /[ 2 3 4

:/{		@unittest func()
	:map assert=? l3.getType /{ :value /{ :a 1 :b 2 

:/`		@unittest func()
	8 assert=? l3.eval /` 5 + 3

:/*		@unittest func()
	:a /* comment */ <- /* comment */ 5 + 3
	8 assert=? a

:"		@unittest func()
	:asdf assert=? " asdf "

:'		@unittest func()
	:asdf assert=? ' asdf '

:/"		@unittest func()
	:asdf assert=? /" asdf

:/'		@unittest func()
	:asdf assert=? /' asdf

:<-		@unittest func()
	:a <- 5
	5 assert=? a

:=		@unittest func()
	:a <- 5
	:a = 4
	4 assert=? a

:var	@unittest func()
	var :a = 5
	5 assert=? a


//
// function definitions:

:func	@unittest func()
	:a <- func ->b
		b + 2
	7 assert=? func 5

:infix	@unittest func()
	:a <- /( ->b infix ->c
		b + c
	42 assert=? 40 a 2

:postfix @unittest func()
	:a <- /( ->b postfix
		b + 2
	5 assert=? 3 a

:func()	@unittest func()
	:a <- func()
		3.5
	3.5 assert=? a


//
// get & set

:.		@unittest func()
	4 assert=? { :a 3 :b 4 :c 5 } . :b
	3 assert=? [ 6 5 4 3 2 ] . 3

:@		@unittest func()
	false

:.@		@unittest func()
	false

:.@@	@unittest func()
	false

:@doc	@unittest func()
	false

:.@doc	@unittest func()
	false

:@order @unittest func()
	false

:@body? @unittest func()
	false

:@@ @unittest func()
	false

:@@type @unittest func()
	false

:@@default @unittest func()
	false

:@@rest @unittest func()
	false

:copy	@unittest func()
	false

:currentScope @unittest func()
	false


//
// more function definitions

:lambda	@unittest func()
	false

:((		@unittest func()
	false

:/((	@unittest func()
	false

:lambda1	@unittest func()
	false

:(|		@unittest func()
	false

:/(|	@unittest func()
	false

:lambda2	@unittest func()
	false

:(<		@unittest func()
	false

:/(<	@unittest func()
	false


//
// logic

:&? @unittest func()
	false

:|? @unittest func()
	false

:!? @unittest func()
	false

:=? @unittest func()
	false

:!=? @unittest func()
	false

:=any? @unittest func()
	false


//
// arrays

:.. @unittest func()
	[ 3 4 5 6 ] assert=? ( 3 .. 6 )

:+a @unittest func()
	[ 3 4 5 6 ] assert=? [ 3 4 ] +a [ 5 6 ]
	[ 3 4 5 6 ] assert=? [ 3 4 5 ] +a 6
	[ 3 4 5 6 ] assert=? [ 3 4 5 6 ] +a [ ]
	[ 3 4 5 6 ] assert=? [ 3 4 5 6 ] +a nil

:+= @unittest func()
	// array addition
	:a <- [ 3 4 5 ]
	// todo: perhaps it should be :a += 6
	a += 6
	[ 3 4 5 6 ] assert=? a

:countOf @unittest func()
	3 assert=? countOf /[ 5 6 8
	2 assert=? countOf /{ :a 1 :b 3
	5 assert=? countOf /" qwert

:apply @unittest func()
	[ 6 10 14 ] assert=? [ 3 5 7 ] apply (| ## * 2 |)

:foldLeft @unittest func()
	1 assert=? [ 27 9 3 ] foldLeft (< #1 / #2 >)

:foldRight @unittest func()
	9 assert=? [ 27 9 3 ] foldRight (< #1 / #2 >)

:filter @unittest func()
	[ 3 5 7 ] assert=? [ 2 3 4 5 6 7 8 ] filter (| ## % 2 =? 1 |)

:makeArray @unittest func()
	:a <- makeArray
		:asdf
		3.5
		2
	[ :asdf 3.5 2 ] assert=? a


//
// maps

:makeMap @unittest func()
	:a <- makeMap
		:1 2
		:3 4
	{ :1 2 :3 4 } assert=? a


//
// conditional

:? @unittest func()
	2 assert=? true  ? [ 2 3 ]
	3 assert=? false ? [ 2 3 ]

:if @unittest func()
	// if is run
	:a <- false
	if true
		:a = true
	assertTrue? a
	// if is skipped
	if false
		assertFail /" if shouldn't have been called

:elsif @unittest func()
	// if is run, not elsif
	:a <- 0
	if true
		:a = 1
	elsif true
		assertFail /" elsif shouldn't have been called
	1 assert=? a
	// elsif is run
	:a <- 0
	if false
		assertFail /" if shouldn't have been called
	elsif true
		:a = 2
	2 assert=? a
	// if & elsif are skipped
	:a <- 0
	if false
		assertFail /" if shouldn't have been called
	elsif false
		assertFail /" elsif shouldn't have been called
	0 assert=? a

:else @unittest func()
	// if is run, not else
	:a <- 0
	if true
		:a = 1
	else
		assertFail /" else shouldn't have been called
	1 assert=? a
	// else is run
	:a <- 0
	if false
		assertFail /" if shouldn't have been called
	else
		:a = 2
	2 assert=? a
	
	// if is run
	:a <- 0
	if true
		:a = 1
	elsif true
		assertFail /" elsif shouldn't have been called
	else
		assertFail /" else shouldn't have been called
	1 assert=? a
	// elsif is run
	:a <- 0
	if false
		assertFail /" if shouldn't have been called
	elsif true
		:a = 2
	else
		:a = 3
	2 assert=? a
	// else is run
	:a <- 0
	if false
		assertFail /" if shouldn't have been called
	elsif false
		assertFail /" elsif shouldn't have been called
	else
		:a = 3
	3 assert=? a


//
// loop

:while @unittest func()
	:total <- 0
	:i <- 0
	while /` i !=? 5
		:i = i + 1
		:total = total + i
	5  assert=? i
	15 assert=? total

:for @unittest func()
	// todo: should be able to declare i inside for
	:total <- 0
	:i <- 0
	for /[ ` :i = 0 ` ` i !=? 5 ` ` :i = i + 1 `
		:total = total + i
	10 assert=? total

:forEach @unittest func()
	:total <- 0
	:i forEach ( 1 .. 5 )
		:total = total + i
	15 assert=? total
	:total <- 0
	:i forEach { :a 2 :b 4 }
		:total = total + i . 1
	6 assert=? total

:forEachDelim @unittest func()
	// create a function that turns a body into a map
	:thing <- func()
		:result <- nil
		:map forEachDelim [ body :{ ]
			:result = result +a map
	:thing @body? true
	// use that function to create a map
	:test <- thing
		:a 5
		:b 7
	{ :a 5 :b 7 } assert=? test

:break @unittest func()
	:total <- 0
	:i <- 0
	while /` i !=? 8
		:i = i + 1
		if i =? 4
			break
		:total = total + i
	6 assert=? total


//
// enumerated type

:enum @unittest func()
	:asdf enum [ :qwert :yuiop ]
	0		assert=? asdf.qwert
	1		assert=? asdf.yuiop
	:asdf	assert=? l3.getType /{ :value asdf.yuiop


//
// math

:+ @unittest func()
	42 assert=? 39 + 3

:- @unittest func()
	7 assert=? 10 - 3

:* @unittest func()
	10 assert=? 5 * 2

:/ @unittest func()
	3 assert=? 9 / 3

:% @unittest func()
	3 assert=? 15 % 4

:sqrt @unittest func()
	assertTrue? ( ( sqrt 4 ) - 2 ) <? 0.00000001
	assertTrue? ( ( sqrt 2 ) - 1.414213562 ) <? 0.00000001

:<? @unittest func()
	assertTrue?  4 <? 5
	assertFalse? 5 <? 4

:>? @unittest func()
	assertTrue?  5 >? 4
	assertFalse? 4 >? 5

:min @unittest func()
	4 assert=? 4 min 7

:max @unittest func()
	7 assert=? 4 max 7


//
// strings

:=>str @unittest func()
	:5				assert=? 5 =>str
	:5.5			assert=? 5.5 =>str
	:5				assert=? :5 =>str
	" [ 1 2 3 ] "	assert=? [ 1 2 3 ] =>str

:+s @unittest func()
	:qwert assert=? :qw +s :ert

:"" @unittest func()
	:string	assert=? l3.getType /{ :value ""
	0		assert=? l3.getCount ""


//
// modules

:import @unittest func()
	false


//
// I/O

:print @unittest func()
	false
