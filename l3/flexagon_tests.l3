/// unittests for flexagon.l3
	to run tests:
		loki3> import :unittest.l3
		loki3> unittestPresent .[ :flexagon.l3 :flexagon_tests.l3


:makeFlex @unittest func0
	:Z v= .( makeFlex .[ :name :Z [ ->p1 ->p2 ] "[ p2 p1 ]"
	[2 1] assert=? [1 2] Z
	// one flex failed
	:fail1 v= [1] Z
	[ :Z ]  assert=? fail1 . 0 . :flexes
	[1]     assert=? fail1 . 0 . :flexagon
	// two flexes failed
	:fail2 v= [1] Z Z
	[:Z :Z] assert=? fail2 . 0 . :flexes
	[1]     assert=? fail2 . 0 . :flexagon

:~ @unittest func0
	-1 assert=? ~ 1
	[ -2 -1 ] assert=? ~ [1 2]
	[ [-3 -2] -1 ] assert=? ~ [ 1 [2 3] ]

:flexgen @unittest func0
	:genT v= [ [ [->p1 ->p2] ->p3 ] ->p4 ->p5 [->p6 ->p7] ->p8 ->p9 ]

	:a v= (1 .. 6) flexgen genT
	[ [ [ 1 7 ] 8 ] 2 3 [ 4 9 ] 5 6 ] assert=? a

	:b v= [ [1 2] 3 4 5 6 7 ] flexgen genT
	[ [ [ 1 8 ] 2 ] 3 4 [ 5 9 ] 6 7 ] assert=? b

	:c v= [ [ 1 [2 3] ] 4 5 6 7 -8 ] flexgen genT
	[ [ [ 1 9 ] [ 2 3 ] ] 4 5 [ 6 10 ] 7 -8 ] assert=? c

:^ @unittest func0
	[ -15 [ -11 [ -14 [ -12 -13 ] ] ] -10 [ -6 [ -9 [ -7 -8 ] ] ] -5 [ -1 [ -4 [ -2 -3 ] ] ] ] assert=? .( penta ^

:> @unittest func0
	[ 5 [ [ [ 8 7 ] 9 ] 6 ] 10 [ [ [ 13 12 ] 14 ] 11 ] 15 [ [ [ 3 2 ] 4 ] 1 ] ] assert=? .( penta >

:< @unittest func0
	[ 15 [ [ [ 3 2 ] 4 ] 1 ] 5 [ [ [ 8 7 ] 9 ] 6 ] 10 [ [ [ 13 12 ] 14 ] 11 ] ] assert=? .( penta <

:P @unittest func0
	[ [ -4 [ -2 -3 ] ] [ 6 -5 ] [ -9 [ -7 -8 ] ] [ 11 -10 ] [ -14 [ -12 -13 ] ] [ 1 -15 ] ] assert=? .( penta P

:T @unittest func0
	[ 1 2 3 [4 5] 6 [7 [9 8] ] ] T' assert=? [ [ [-7 1] -8 ] 2 3 [4 5] 6 9 ]

:T' @unittest func0
	[ [ [-7 1] -8 ] 2 3 [4 5] 6 9 ] assert=? [ 1 2 3 [4 5] 6 [7 [9 8] ] ] T'

:S @unittest func0
	[ [ [ [ 3 2 ] 4 ] [ 14 [ 1 -15 ] ] ] 5 [ [ [ 8 7 ] 9 ] 6 ] 10 [ 12 11 ] -13 ] assert=? .( penta S

:findFlexes @unittest func0
	[ :P :S :>>P :>>S :>>>>P :>>>>S :^>P :^>>>P :^>>>>>P ] assert=? .( findFlexes .[ penta [ defP defT defS ]

