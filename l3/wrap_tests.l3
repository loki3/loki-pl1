
:catch @unittest func0

:some @unittest noTestNeeded
:none @unittest noTestNeeded
:isSome @unittest noTestNeeded
:isNone @unittest noTestNeeded
:ok @unittest noTestNeeded
:error @unittest noTestNeeded
:isOk @unittest noTestNeeded
:isError @unittest noTestNeeded

:unwrap @unittest func0
	// Option.Some
	3 assert=? unwrap (some 3)
	// Option.None should throw
	:threw? v= false
	try
		unwrap none
	catch .( :e @@hasKeys [ :option ]
		:threw? = true
	assertTrue? threw?
	// Result.Ok
	4 assert=? unwrap (ok 4)
	// Result.Error
	:threw? v= false
	try
		unwrap .( error :oops
	catch .( :e @@hasKeys [ :result ]
		:threw? = true
	assertTrue? threw?

:unwrapOr @unittest func0
	// Option
	3  assert=? .( (some 3) unwrapOr 42
	42 assert=? .( none     unwrapOr 42
	// Result
	4  assert=? .( (ok 4)        unwrapOr 43
	43 assert=? .( (error :oops) unwrapOr 43

:andDo @unittest func0
	// Option
	(some 6) assert=? .( (some 3) andDo (2 *)
	none     assert=? .( none     andDo (2 *)
	// Result
	(ok 8)        assert=? .( (ok 4) andDo (2 *)
	(error :oops) assert=? .( (error :oops) andDo (2 *)
