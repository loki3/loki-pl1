//
// unit tests for ca.l3
//

:lifeBoard @unittest func0
	:b v= lifeBoard
		.*.
		*..
	[ false true false ] assert=? b . 0
	[ true false false ] assert=? b . 1

:=>pretty @unittest func0
	:b v= [ [ true false ] [ false true ] ]
	( "*." + \n + ".*" + \n ) assert=? ( b =>pretty )

:{{ @unittest func0
	:b v= [ [ true false true ] [ false true true ] ]
	true  assert=? {{ b 0 0 }}
	false assert=? {{ b 0 1 }}
	true  assert=? {{ b 0 2 }}
	false assert=? {{ b 1 0 }}
	true  assert=? {{ b 1 1 }}
	true  assert=? {{ b 1 2 }}


:countNeighbors @unittest func0
	:b v= [ [ true false ] [ false true ] ]
	1 assert=? countNeighbors [b 0 0]
	2 assert=? countNeighbors [b 0 1]
	2 assert=? countNeighbors [b 1 0]
	1 assert=? countNeighbors [b 1 1]
	true

:getNextState @unittest func0
	// **.*
	// .***
	:b v= [ [ true true false true ] [ false true true true ] ]
	// survives with 2 neighbors
	true  assert=? getNextState [b 0 0]
	// survives with 3 neighbors
	true  assert=? getNextState [b 0 1]
	// no birth with 5 neighbors
	false assert=? getNextState [b 0 2]
	// survives with 2 neighbors
	true  assert=? getNextState [b 0 3]
	// born from 3 neighbors
	true  assert=? getNextState [b 1 0]
	// survives with 3 neighbors
	true  assert=? getNextState [b 1 1]
	// dies from 4 neighbors
	false assert=? getNextState [b 1 2]
	// survives with 2 neighbors
	true  assert=? getNextState [b 1 3]

:getNextBoard @unittest func0
	// **.*
	// .***
	:b' v= getNextBoard [ [ true true false true ] [ false true true true ] ]
	[ true true false true ] assert=? b' . 0
	[ true true false true ] assert=? b' . 1

:ticks @unittest func0
	// ...
	// ***
	// ...
	:b v= [ [ false false false ] [ true true true ] [ false false false ] ]
	:b' v= [ [ false true false ] [ false true false ] [ false true false ] ]
	b' assert=? ( b ticks 1 )
	b  assert=? ( b ticks 2 )

:glider @unittest noTestNeeded

