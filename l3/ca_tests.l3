//
// unit tests for ca.l3
//

:caBoard2d @unittest func0
	:b v= caBoard2d
		.*.
		*..
	[ 0 1 0 ] assert=? b . 0
	[ 1 0 0 ] assert=? b . 1

:=>pretty2d @unittest func0
	:b v= [ [1 0] [0 1] ]
	( "*." + \n + ".*" + \n ) assert=? ( b =>pretty2d )

:glider @unittest noTestNeeded
:adjacent1d @unittest noTestNeeded
:moore2d @unittest noTestNeeded
:vonNeumann2d @unittest noTestNeeded

:apply1d @unittest func0
	// basic
	:input1    v= .[ 1 1 1 0 1 0 0 0
	:expected1 v= .[ 0 1 0 0 1 1 0 0
	:actual1 v= input1 apply1d (< ( #1 + #2 . 0 + #2 . 1 ) =any? [1 3] ? [1 0] >)
	expected1 assert=? actual1
	// change default & neighborhood
	:input2    v= .[ 1 1 1 0 1 0 0 0
	:expected2 v= .[ 0 0 1 1 1 0 0 1
	:actual2 v= input2 apply1d .[ (< (#1 + #2 . 0) =any? [1 3] ? [1 0] >) .{ :default 1 :neighborhood [ 1 ]
	expected2 assert=? actual2

:apply2d @unittest func0
	// basic
	:input1 v= caBoard2d
		**.*
		.***
	:expected1 v= caBoard2d
		*..*
		..**
	:actual1 v= input1 apply2d (< [ #1 ( #2 fold ( + ) ) ] =any? [ [1 2] [1 4] ] ? [1 0] >)
	expected1 assert=? actual1
	// change default & neighborhood
	:input2 v= caBoard2d
		*..*
		..**
	:expected2 v= caBoard2d
		*.*.
		*.*.
	:f v= (< [ #1 ( #2 fold ( + ) ) ] =any? [ [1 2] [0 3] ] ? [1 0] >)
	:actual2 v= input2 apply2d [ f { :default 1 :neighborhood vonNeumann2d } ]
	expected2 assert=? actual2

:lifeCell @unittest func0
	0 assert=? 0 lifeCell [0 1 1]
	1 assert=? 0 lifeCell [1 0 1 1]
	0 assert=? 0 lifeCell [1 0 1 1 0 1]
	0 assert=? 1 lifeCell [0 1 0]
	1 assert=? 1 lifeCell [0 1 1]
	1 assert=? 1 lifeCell [0 1 1 0 1]
	0 assert=? 1 lifeCell [0 1 1 1 0 1]

:defRule2d @unittest func0
	:rule v= defRule2d
		:neighborhood [ [-1 0] [0 -1] [0 1] [1 0] ]
		:transition   (( [->state ->n] ` n =any? [2 3] ? [1 0] ` ))
	:input v= caBoard2d
		.*..*
		**.*.
	:expected v= caBoard2d
		*..*.
		.**.*
	:actual v= rule input
	expected assert=? actual

:life @unittest func0
	:input v= caBoard2d
		**.*
		.***
	:expected v= caBoard2d
		**.*
		**.*
	:actual v= life input
	expected assert=? actual
