// unittests for test.l3
// unittestUnittests [ :unittest.l3 :unittest_tests.l3 ]

:unittest @unittest testNYI

:unittestPresent @unittest testNYI

:runTestFile @unittest testNYI

:unittestUnittests @unittest testNYI

:unittestScope @unittest testNYI

:testFunction @unittest testNYI

:checkDocs @unittest func0
	// create values with & without docs
	:noDocs v= 42
	:hasDocs v= 42
	:hasDocs @doc ." Nothing useful
	:unittestCat v= ." Stuff in the :unittest category is ignored
	:unittestCat @cat :unittest
	// check for docs
	[ :success? :checkedCount :failureList ] v= checkDocs currentScope
	assertFalse? success?
	2 assert=? checkedCount
	[ :noDocs ] assert=? failureList

:@unittest @unittest testNYI

:.@unittest @unittest func0
	// value without any test
	:noTest v= 42
	nil assert=? .( :noTest .@unittest
	// value with a stubbed out test
	:emptyTest v= 42
	:emptyTest @unittest noTestNeeded
	true assert=? .( :emptyTest .@unittest
	// value with a test
	:withTest v= 42
	:withTest @unittest func0
		42
	42 assert=? .( :withTest .@unittest

:noTestNeeded @unittest testNYI

:testNYI @unittest testNYI

:throws? v= func1 ->rawLines
	:threw? v= false
	try
		l3.eval rawLines
	catch :e
		:threw? = true
	threw?
:throws? @cat "" @doc "Returns true if the passed in code fails" @unittest noTestNeeded

:assert=? @unittest func0
	assertFalse? throws? .` 2 assert=? 2
	assertTrue?  throws? .` 3 assert=? 2

:assertTrue? @unittest testNYI
	false assert=? throws? .` assertTrue? true
	true  assert=? throws? .` assertTrue? false

:assertFalse? @unittest testNYI
	true  assert=? throws? .` assertFalse? true
	false assert=? throws? .` assertFalse? false

:assertFail @unittest testNYI
	assertTrue? throws? .` assertFail :message

:dumpAssert @unittest testNYI

:runUnittests @unittest func0
	// create a few functions to test
	:noTest v= (| ## |)
	:fail v= (| ## |)
	:fail @unittest func0
		assertFail ." simply fails
	:succeed v= (| ## |)
	:succeed @unittest func0
		assertTrue? true
	// run tests
	[ :success? :passedCount :failureList ] v= runUnittests currentScope
	assertFalse? success?
	1 assert=? passedCount
	[ :noTest :fail ] assert=? failureList

:runTests @unittest testNYI

:runUnittestsPresent @unittest testNYI

:dumpTest @unittest func0
	// value without any test
	:noTest v= 42
	"no test" assert=? .( dumpTest :noTest
	// value with a stubbed out test
	:emptyTest v= 42
	:emptyTest @unittest noTestNeeded
	"empty test" assert=? .( dumpTest :emptyTest
	// value with a test
	:withTest v= 42
	:withTest @unittest func0
		42
	:rawLines assert=? l3.getType { :value ( dumpTest :withTest ) }
