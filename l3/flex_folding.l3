/// flexagon unfolding
	`=>foldpat`		convert from pats (nested arrays of leaf numbers) to 'foldpats',
					which describe how the pats are folded
	`=>strip`		convert foldpats to a format that describes an unfolded strip
	`unfoldAll`		unfold all hinges in an array of foldpats

	e.g. `unfoldAll (penta =>foldpat) =>strip`

import :flexagon.l3

:testFold v= func0
	import :unittest.l3
	unittestPresent .[ :flex_folding.l3 :flex_folding_tests.l3

// types

:dir =enum [ :< :> ]
:dirs v= [ dir.< dir.> ]

:foldPatType v= [ (:pat : :array) (:numbers : :array) (:dir o= dirs) (:next : :int) ]


// conversion

:=>foldpat v= .( ( ->pats : :array ) 1func
	pats apply (| { :pat ## :numbers [1 2] :dir dir.> :next 3 } |)
:=>foldpat @cat :flex @doc ." convert pats to foldpat notation, which can be unfolded (assumes a triangle flexagon meeting at a common point)

:=>strip v= .( ( ->foldpats : :array ) 1func
	foldpats apply (| [ (## . :numbers . 0) (## . :numbers . 1) ( (## . :dir) =? dir.> ? [ :> :< ] ) ] |)
:=>strip @cat :flex @doc ." convert foldpat notation to a simple description of a strip of triangles


// manipulating fold-pats

:flip v= multifunc1
	when [ ->pat (->numbers : :array) (->dir o= dirs) ->next ]
		{ :pat (~ pat) :numbers [ (numbers . 1) (numbers . 0) ] :dir ( (dir =? dir.< ) ? [ dir.> dir.< ] ) :next next }
	when ( ->pats : :array )
		pats apply (| flip ## |)
:flip @cat :flex @doc ." flip over one or more fold-pats

:unfold v= func1 { :pat [->p1 ->p2] :numbers [->n1 ->n2] :dir ->dir :next ->next }
	if dir =? dir.>
		[ { :pat p2 :numbers [next n2] :dir dir.< :next (next + 1) } { :pat (~ p1) :numbers [next n1] :dir dir.> :next (next + 1) } ]
	else
		[ { :pat p1 :numbers [n1 next] :dir dir.> :next (next + 1) } { :pat (~ p2) :numbers [n2 next] :dir dir.< :next (next + 1) } ]
:unfold @cat :flex @doc ." unfold a single fold-pat

:unfoldAt v= .( (->foldpats : :array) 1func1 (->at : :int)
	:fp v= foldpats apply .(< [ (#1 <? at) (#1 =? at) ] ? .r[ #2 (unfold #2) (flip #2)
	flatten fp
:unfoldAt @cat :flex @doc ." take a collection of foldpats and unfold a specified one

:findNextHinge v= func1 (->foldpats : :array)
	[ :i :end ] v= [ 0 (foldpats .size) ]
	while .( (i <? end) &? .( l3.getType { :value (foldpats . i . :pat) } !=? :array
		:i ++
	(i =? foldpats .size) ? [ nil i ]
:findNextHinge @cat :flex @doc ." find the next foldpat than can be unfolded, or nil if none

:unfoldAll v= func1 (->foldpats : :array)
	:hinge v= findNextHinge foldpats
	while (hinge !=? nil)
		:foldpats = foldpats unfoldAt hinge
		:hinge = findNextHinge foldpats
	foldpats
:unfoldAll @cat :flex @doc ." completely unfold a list of foldpats
