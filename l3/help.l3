//
// Help framework
//
// Provides tools for getting help on functions
//
// metahelp
// helpAll
// help :someFunction
// dumpMeta :someFunction
// listFunctions currentScope
// getByCat :someCat
//

:metahelp v= func0
	:rawlist v= [ :metahelp :help :getDocs :getAllCats :getByCat :dumpMeta :.@example ]
	:doclist v= rawlist apply (| [ ## ( ## .@doc ) ] |)
	l3.formatTable2 { :arrayOfArrays doclist :dashesAfterFirst? true }
:metahelp @cat :help @doc ." Useful commands for exploring loki3 functions

:helpAll v= func0
	:map v= l3.getScope .{ :level 1
	map applyMap .(< print help #1
	""
:helpAll @cat :help @doc ." Print out information on everything defined in the given scope

:help v= func1 .( ->key : :string
	:general=>string v= .( [ ->name ->type ->category ->documentation ] 1func
		stringify ""
			name + \t + "type(" + type + ")"
			(category =? nil)      ? .[ ""   `\t + "category(" + category + ")"`
			\n
			(documentation =? nil) ? .[ ""   `">" + documentation + \n`
			\n

	:specific=>string v= .( ->specific 1func
		:header v= [ "properties" "-----" "-----" ]
		:sansOverloads v= ( map . :specific ) filterMap (< #1 !=? :overloads >)
		:table v= .( sansOverloads mapToArray (< [ "" #1 #2 ] >) fold (< #1 + #2 >)
		l3.formatTable { :array (header + table) :columns 3 }

	:overloads=>string v= .( ->overloads 1func
		:s v= ""
		if overloads !=? nil
			:overload =eachIn overloads
				if ( overload . :pre ) !=? [ ]
					:s = s + \n + .( dumpParams .[ :pre overload
				if ( overload . :post ) !=? [ ]
					:s = s + \n + .( dumpParams .[ :post overload
		s

	// build up a description of pre or post parameters
	:dumpParams v= func1 .[ ->preOrPost ->overloads
		:table v= [ :name :type :default :rest ]
		:param =eachIn ( overloads . preOrPost )
			[ :name :type :default :rest ] apply (| :table = table + ( param . ## ) |)
		:s v= "- " + preOrPost + " parameters -" + \n
		s + .( l3.formatTable .{ :array table :columns 4 :dashesAfterFirst? true
	
	:map v= describe key
	stringify ""
		\n + "============" + \n
		map . :general  general=>string
		map . :specific specific=>string
		map . :specific . :overloads overloads=>string
:help @cat :help @doc ." Describe the value represented by a key.


:describe v= func1 .( ->key : :string
	:getSpecific f= func1 .[ ( ->key : :string ) ( ->value : :function )
		// figure out if var is an in/post/prefix function
		:getFixType v= func0
			[ :prev  :next ]  v= [ ( key .@ :l3.func.previous ) ( key .@ :l3.func.next ) ]
			[ :prev? :next? ] v= [ ( prev !=? nil ) ( next !=? nil ) ]
			[ (prev? &? next?) prev? next? ] ? [ :1func1 :1func :func1 :nofix ]
		
		// get an array of all params
		:getParams v= func1 ->params
			// extract metadata on a single parameter
			:getParam v= func1 ->param
				:getMeta v= func1 ->which
					:key v= :l3.pattern. + which
					if ( :t v= ( l3.getMetadata { :value param } ) . key ) =? nil
						:t = ""
					t
				{ :name param :type ( getMeta :type ) :default ( getMeta :default ) :rest ( getMeta :rest ) }
			// build up list of parameter information
			:paramsList v= [ ]
			if params !=? nil
				:type v= l3.getType .{ :value params
				if type =any? [ :map :array ]
					:param =eachIn params
						if :map =? l3.getType .{ :value params
							:paramsList = paramsList + .[ .( getParam .( param . 1
						else
							:paramsList = paramsList + .[ .( getParam param
				else
					:paramsList = paramsList + .[ .( getParam params
			paramsList
		
		[ :order :body? ] v= [ ( key .@ :l3.value.order ) ( key .@ :body? ) ]
		if order =? nil
			:order = 3
		if body? =? nil
			:body? = false
		:map v= { :fix ( getFixType ) :order order :body? body? }
		
		:overloads v= [ ]
		if ( key .@ :l3.func.overload? ) !=? nil
			// each of the function overloads
			:f =eachIn ( value )
				:temp v= ( f )
				:overload v= .{ :pre  .( getParams .( :temp .@ :l3.func.previous
				:overload = overload \/ .{ :post .( getParams .( :temp .@ :l3.func.next
				:overloads = overloads + [ overload ]
		else
			:overload v= .{ :pre  .( getParams .( key .@ :l3.func.previous
			:overload = overload \/ .{ :post .( getParams .( key .@ :l3.func.next
			:overloads = overloads + [ overload ]
		map \/ { :overloads overloads }
	
	
	:getSpecific f= func1 .[ ( ->key : :string ) ( ->value : :delimiter )
		:map v= .{ :start key :end ( key .@ :l3.delim.end )
		// turn the number representing the type into a string
		:delimEnum v= .[ :comment :string :value :array :raw
		:map = map \/ .{ :parseAs ( delimEnum . ( key .@ :l3.delim.type ) )
		// associated function, if any
		:function v= key .@ :l3.delim.function
		if ( function ) !=? nil
			:temp v= ( function )
			:map = map \/ { :function ( describe :temp ) }
		else
			:map = map \/ { :function nil }
		map
	
	:getSpecific f= func1 .[ ( ->key : :string ) ( ->value : :enum )
		.{ :values .( ( l3.getValue { :key key } ) mapToArray (< #2 >)
	:getSpecific f= func1 .[ ( ->key : :string ) ->value
		{ :value value }
	
	// general properties
	:general v= .{ :name key  :type ( l3.getType { :key key } )  :documentation ( key .@doc )  :category ( key .@cat )
	// specific properties based on type
	:specific v= .( getSpecific .[ key ( l3.getValue { :key key } )
	// full results
	{ :general general :specific specific }
:describe @cat :help @doc ." Create a description of the value represented by a key, returning a map with details.



:dumpBody v= func1 ( ->name : :string )
	( l3.getFunctionBody { :key name } ) fold (< ( #1 =>str ) + \n + ( #2 =>str ) >)
:dumpBody @cat :help @doc ." Get the body of a function


:dumpMeta v= func1 ->key
	:table v= [ :key :value ]
	:metadata v= l3.getMetadata { :key key }
	:pair =eachIn metadata
		// handle docstrings separately because they're long
		if ( pair . 0 ) =? :l3.value.doc
			:table = table + [ ( pair . 0 ) "<docstring>" ]
		else
			:table = table + pair
	l3.formatTable { :array table :columns 2 :dashesAfterFirst? true }
:dumpMeta @cat :help @doc ." Dump metadata for the given value attached to a key


:dumpStack v= func1 ->scope
	:table v= [ :function :scope ]
	:i =eachIn scope
		:function v= :i .@ :l3.scope.calledFunction
		:context  v= .( i .size <? 20 ? [ i "<many values>" ]
		:table = table + [ function context ]
	l3.formatTable { :array table :columns 2 :dashesAfterFirst? true }
:dumpStack @cat :help @doc ." Dump the given stack, listing function names and variables that are defined in each scope.

:dumpCurrentStack v= func0
	dumpStack .( l3.getScope .{ :level 1
:dumpCurrentStack @cat :help @doc ." Dump the current stack, listing function names and variables that are defined in each scope.


:listFunctions v= func1 ->map
	:table v= map filterMap (< :function =? l3.getType { :key #1 :builtin? true } >) mapToArray (< #1 >)
	l3.formatTable { :array table :columns 3 }
:listFunctions @cat :help @doc ." List all the functions in the given map

:listEnums v= func1 ->map
	:table v= map filterMap (< :enum =? l3.getType { :key #1 } >) mapToArray (< #1 >)
	l3.formatTable { :array table :columns 3 }
:listEnums @cat :help @doc ." List all the enums in the given map

:listDelimiters v= func1 ->map
	:table v= map filterMap (< :delimiter =? l3.getType { :key #1 :builtin? true } >) mapToArray (< #1 >)
	l3.formatTable { :array table :columns 7 }
:listDelimiters @cat :help @doc ." List all the delimiters in the given map

:listAllCats v= func1 ->map
	map filterMap (< #1 .@cat !=? nil >) applyKeys (< #1 .@cat >) filterKeysToArray (| true |)
:listAllCats @cat :help @doc ." List all the categories in the given map

:listByCat v= ( ->cat 1func1 ->map )
	:table v= map filterMap (< ( #1 .@cat ) =? cat >) mapToArray (< [ #1 ( #1 .@doc) ] >)
	l3.formatTable2 { :arrayOfArrays table }
:listByCat @cat :help @doc ." List all the values in a given category and map


:getDocs v= func0
	:scope v= l3.getScope .{ :level 1
	getDocsInScope scope
:getDocs @cat :help @doc ." Return all the docstrings attached to the values in the current scope

:getDocsInScope v= func1 ->scope
	:table v= scope filterMap (< #1 .@doc !=? nil >) mapToArray (< [ :> #1 ( #1 .@doc ) ] >)
	l3.formatTable2 { :arrayOfArrays table }
:getDocsInScope @cat :help @doc ." Return all the docstrings attached to the values in a given scope

:getFileDocs v= func1 ->file
	import file
	getDocsInScope currentScope
:getFileDocs @cat :help @doc ." Return all the docstrings attached to the values in a given file

:getAllCats v= func0
	listAllCats .( l3.getScope .{ :level 1
:getAllCats @cat :help @doc ." Return all the categories for all the values in the current scope

:getByCat v= func1 ->cat
	cat listByCat .( l3.getScope .{ :level 1
:getByCat @cat :help @doc ." Return all the values in a given category


:prettify v= func1 ->map
	:table v= map mapToArray (< [ #1 #2 ] >)
	l3.formatTable2 { :arrayOfArrays table }
:prettify @cat :help @doc ." Return a map as a simple table represented by a string
