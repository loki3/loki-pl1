// unittests for test.l3

:fizzbuzz20 <- /[ 1 2 :fizz 4 :buzz :fizz 7 8 :fizz :buzz 11 :fizz 13 14 :fizzbuzz 16 17 :fizz 19 :buzz
:fizzbuzz20 @doc /" Expected output for fizzbuzz from 1 to 20
:fizzbuzz20 @unittest true

:fizzBuzz1 @unittest func()
	fizzbuzz20 assert=? fizzBuzz1

:fizzBuzz2 @unittest func()
	fizzbuzz20 assert=? fizzBuzz2

:fizzbuzz3 @unittest func()
	fizzbuzz20 assert=? fizzbuzz3

:i @unittest func()
	{ :x 0 :y 3 } assert=? 3 i

:+c @unittest func()
	{ :x 4 :y 6 } assert=? { :x 1 :y 2 } +c { :x 3 :y 4 }
	{ :x 3 :y 8 } assert=? 4 i +c { :x 3 :y 4 }

:*c @unittest func()
	{ :x -12 :y 0 } assert=? 4 i *c 3 i

// stub out tests & docstrings for the enum & its values
:days				@unittest (| true |)
( :days.sunday		@unittest (| true |) ) @doc /"
( :days.monday		@unittest (| true |) ) @doc /"
( :days.tuesday		@unittest (| true |) ) @doc /"
( :days.wednesday	@unittest (| true |) ) @doc /"
( :days.thursday	@unittest (| true |) ) @doc /"
( :days.friday		@unittest (| true |) ) @doc /"
( :days.saturday	@unittest (| true |) ) @doc /"

:isWeekend @unittest func()
	( isWeekend days.sunday )	assert=? true
	( isWeekend days.monday )	assert=? false
	( isWeekend days.tuesday )	assert=? false
	( isWeekend days.wednesday ) assert=? false
	( isWeekend days.thursday )	assert=? false
	( isWeekend days.friday )	assert=? false
	( isWeekend days.sunday )	assert=? true
