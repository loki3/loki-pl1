//
// Cellular automata and Conway's game of life
//

:lifeBoard v= func0
	[body :"] applyAs (| (## =>array) apply (| ## =? "*" |) |)
:lifeBoard @body? true @cat :ca @doc ." Create a 2D board of on/off states from a body where * means on

:=>pretty v= .( (->board : :array) 1func
	:doLine v= func1 ->s
		( s apply (| ## ? [ "*" "." ] |) foldLeft (< #1 + #2 >) ) + \n
	board apply (doLine) foldLeft (+)
:=>pretty @cat :ca @doc ." Turn a board created by :lifeBoard into a pretty-printed string

:{{ v= l3.createDelimiter .{ :end :}} :type :asArray :function (( [ ->board ->x ->y ] ` ( ( board . x ) . y ) ` ))
:{{ @cat :ca @doc ." {{ board x y }} will return true if the cell is on

:countNeighbors v= func1 [ ->board ->x ->y ]
	:total v= 0
	:checkState v= func1 [ ->i ->j ]
		[ :x' :y' ] v= [ (x + i) (y + j) ]
		if {{ board x' y' }}
			:total ++
	[ [-1 -1] [-1 0] [-1 1] [0 -1] [0 1] [1 -1] [1 0] [1 1] ] apply checkState
	total
:countNeighbors @cat :ca @doc ." Count the 8 neighbors of the given cell

:getNextState v= func1 [ ->board ->x ->y ]
	:count v= countNeighbors [ board x y ]
	{{ board x y }} ? [ ( (count =? 3) |? (count =? 2) ) (count =? 3) ]
:getNextState @cat :ca @doc ." Return true/false based on whether cell should be on in the next generation

:growBoard v= func1 ->board
	:fullRow v= ( 1 .. ( (board . 0) .size + 2 ) ) apply (| false |)
	:wider v= board apply (| [false] + ## + [false] |)
	[fullRow] + wider + [fullRow]
:growBoard @cat :ca @doc ." Add a border of cells that are off so no boundary checking is needed

:getNextBoard v= func1 ->board
	// add a single cell's worth of padding around the board so we don't need to check the boundary
	:board' v= growBoard board
	:columns v= ( 1 .. ( (board' . 0) .size - 2 ) )
	:computeRow v= func1 ->y
		columns apply (| getNextState [ board' y ] [ ## ] |)
	( 1 .. ( board' .size - 2 ) ) apply computeRow
:getNextBoard @cat :ca @doc ." Compute the next state of an entire board

:ticks f= .( ->board 1func1 0
	board
:ticks f= .( ->board 1func1 ->n
	(getNextBoard board) ticks (n - 1)
:ticks @cat :ca @doc ." Compute the nth generation of a given board

:glider v= lifeBoard
	.....
	..*..
	...*.
	.***.
	.....
	.....
:glider @cat :ca @doc ." A 'glider' life pattern
