l3.createEvalDelimiter :()
l3.createArrayDelimiter :[]
l3.setValue ( l3.createMap [ :key :{ :value ( l3.createDelimiter l3.createMap [ :start :{  :end :} :type :asArray :function l3.createMap ] ) ] )
l3.setValue { :key :// :value ( l3.createDelimiter { :start ://  :end : :type :asComment } ) }
l3.setValue { :key :" :value ( l3.createDelimiter { :start :"  :end :" :type :asString } ) }
l3.setValue { :key :` :value ( l3.createDelimiter { :start :`  :end :` :type :asRaw } ) }

// the first lines created [] as the array delimiter, {} as the map delimeter,
// " as a string delimiter, ` as the raw delimiter
// and // as the comment delimiter giving us some useful syntax

// assignment
l3.setValue { :key := :value ( l3.createFunction { :pre :key :post :value :order 1 :body [ ` l3.setValue { :key key :value value :scope :parent } ` ] } ) }


//
// function definitions:

// a function which creates a prefix function
:func = l3.createFunction { :post :pattern :body [ ` l3.createFunction { :post pattern } ` ] }

// a function which creates an infix function
:infix = ( l3.createFunction { :pre :pattern1 :post :pattern2 :body [ ` l3.createFunction { :pre pattern1 :post pattern2 } ` ] } )


// math
:+ = ( :a infix :b )
	l3.add [ a b ]

:- = ( :a infix :b )
	l3.subtract [ a b ]

:* = ( :a infix :b )
	l3.multiply [ a b ]

:/ = ( :a infix :b )
	l3.divide [ a b ]

:sqrt = func :a
	l3.sqrt a
