l3.createEvalDelimiter :()
l3.createArrayDelimiter :[]
l3.setValue ( l3.createMap [ :key :{ :value ( l3.createDelimiter l3.createMap [ :end :} :type :asArray :function l3.createMap ] ) ] )
l3.setValue { :key :// :value ( l3.createDelimiter { :type :asComment } ) }

// the first lines created () as the value delimiter,
// [] as the array delimiter, {} as the map delimeter,
// and // as the remainder-of-line comment delimiter

// raw delimiter
l3.setValue { :key :` :value ( l3.createDelimiter { :end :` :type :asRaw } ) }

// create a new variable and assign a value
l3.setValue { :key :v= :value ( l3.createFunction { :pre ->key :post ->value :order 5 :body [ ` l3.setValue { :key key :value value :level 1 :create? true } ` ] } ) }

// same as v= but allows for function overloading
l3.setValue { :key :f= :value ( l3.createFunction { :pre ->key :post ->value :order 5 :body [ ` l3.setValue { :key key :value value :level 1 :create? true :overload? true } ` ] } ) }

// create a new variable with a value of nil, doesn't overwrite if it already exists
l3.setValue { :key :var :value ( l3.createFunction { :post ->name :order 2 :body [ ` l3.setValue { :key name :value nil :level 1 :create? true :initOnly? true } ` ` name ` ] } ) }

// assignment
l3.setValue { :key := :value ( l3.createFunction { :pre ->key :post ->value :order 6 :body [ ` l3.setValue { :key key :value value :level 1 :create? false } ` ] } ) }

// remainder of line is a value
:.( v= l3.createDelimiter { :type :asValue }

// remainder of line is an array
:.[ v= l3.createDelimiter { :type :asArray }

// remainder of line is a map
:.{ v= l3.createDelimiter { :type :asArray :function l3.createMap }

// remainder of line is raw
:.` v= l3.createDelimiter .{ :type :asRaw

// range comment delimiter
:/* v= l3.createDelimiter .{ :end :*/ :type :asComment

// string delimiter
:" v= l3.createDelimiter .{ :end :" :type :asString
:' v= l3.createDelimiter .{ :end :' :type :asString

// remainder of line is a string
:." v= l3.createDelimiter .{ :type :asString
:.' v= l3.createDelimiter .{ :type :asString


//
// function definitions:

// a function which creates a prefix function
:func1 v= l3.createFunction { :post ->pattern }
	l3.createFunction { :post pattern }

// a function which creates an infix function
:1func1 v= .( l3.createFunction { :pre ->pattern1 :post ->pattern2 }
	l3.createFunction { :pre pattern1 :post pattern2 }

// a function which creates a postfix function
:1func v= .( l3.createFunction { :pre ->pattern }
	l3.createFunction { :pre pattern }

// a function with no parameters which may decide to execute its body
:func0 v= l3.createFunction { }
	l3.createFunction { }

// the rest of the line will be put into a function body as an array of values
:body= v= l3.createDelimiter .{ :type :asArray :function .( l3.createFunction .{ :post ->b :body .` .{ :body b


//
// get & set

// member access using the . infix
:. v= .( ->a 1func1 ->b
	l3.getValue .{ :object a :key b

// modify a value's metadata
:@ v= .( ->object 1func1 [ ->key ->value ]
	l3.setValue .{ :map ( l3.getMetadata { :key object :writable? true } ) :key key :value value
	object

// get all the metadata attached to a value
:.@@ v= .( ->object 1func
	l3.getMetadata { :key object }

// get a particular piece of metadata attached to a value
:.@ v= .( ->object 1func1 ->key
	l3.getValue .{ :object ( l3.getMetadata { :key object } ) :key key

// set the doc string on a value
:@doc v= .( ->object 1func1 ->docString
	object @ .[ :l3.value.doc docString

:.@doc v= .( ->object 1func
	:metadata v= l3.getMetadata { :key object }
	(metadata =? nil) ? [ nil ( l3.getValue {:object metadata :key :l3.value.doc} ) ]
:.@doc	@doc ." Get the documentation attached to a value

:@cat v= .( ->object 1func1 ->catString
	object @ .[ :l3.value.cat catString
:@cat @cat :metadata @doc ." Set the category string on a value

:.@cat v= .( ->object 1func
	:metadata v= l3.getMetadata { :key object }
	(metadata =? nil) ? [ nil ( l3.getValue {:object metadata :key :l3.value.cat} ) ]
:.@cat @cat :metadata @doc ." Get the category attached to a value

:@example v= .( ->object 1func1 ->exampleString
	object @ .[ :l3.value.example exampleString
:@example @cat :metadata @doc ." Attach a string to a value showing an example of how to use it

:.@example v= .( ->object 1func
	:metadata v= l3.getMetadata { :key object }
	(metadata =? nil) ? [ nil ( l3.getValue {:object metadata :key :l3.value.example} ) ]
:.@example @cat :metadata @doc ." Get example code attached to a value

:@order v= .( ->object 1func1 ->order
	object @ .[ :l3.value.order order
:@order @cat :metadata @doc ." Add evaluation order to a value

:@body? v= .( ->object 1func1 ->body?
	object @ .[ :body? body?
:@body? @cat :metadata @doc ." Declare that a function requires a body

:@type v= .( ->object 1func1 ->type
	object @ .[ :l3.value.type type
:@type @cat :metadata @doc ." Restrict a key to a specific type

:@iterator v= .( ->object 1func
	object @ .[ :l3.func.createScope? false
	object @type :iterator
:@iterator @cat :metadata @doc ." Add metadata to a function so it can be used as an iterator

:@@ v= .( ->object 1func1 [ ->key ->value ]
	l3.setValue .{ :map ( l3.getMetadata { :value object :writable? true } ) :key key :value value
	object
:@@ @cat :metadata @doc ." Set metadata on a value, e.g. a parameter

:: v= .( ->object 1func1 ->type
	object @@ .[ :l3.pattern.type type
:: @cat :metadata @doc ." Restrict a parameter to a specific type

:d= v= .( ->object 1func1 ->default
	object @@ .[ :l3.pattern.default default
:d= @cat :metadata @doc ." Set the default value for a parameter if not present

:o= v= .( ->object 1func1 ( ->values : :array )
	object @@ .[ :l3.pattern.oneOf values
:o= @cat :metadata @doc ." Value of parameter must be one of the elements of an array

:... v= .( ->object 1func
	object @@ .[ :l3.pattern.rest true
:... @cat :metadata @doc ." Associated parameter will be filled with the remainder of the parameter values

:@@hasKeys f= .( ->object 1func1 ( ->type : :array )
	object @@ .[ :l3.pattern.hasKeys type
:@@hasKeys f= .( ->object 1func1 ( ->type : :map )
	object @@ .[ :l3.pattern.hasKeys type
:@@hasKeys f= .( ->object 1func1 ( ->type : :string )
	object @@ .[ :l3.pattern.hasKeys type
:@@hasKeys @cat :metadata @doc ." Specify that parameter must have certain keys

:copy v= func1 ->value
	l3.copy .{ :value value
:copy @cat :create @doc ." Make a copy of a value

:i= v= .( ->pattern 1func1 ->value
	l3.setValue { :key pattern :value value :level 1 :create? true :initOnly? true }
:i= @order 5
:i= @cat :assign @doc ." If variables don't exist, initialize them, otherwise leave them alone.


// bump up precedence of .
:. @order 2


:///func v= func0
	nil
:///func @cat :delimiter @doc ." Everything on subsequent indented lines is a comment
:///func @body? true

:/// v= l3.createDelimiter .{ :type :asComment :function ///func
:/// @cat :delimiter @doc ." Everything on this and subsequent indented lines is a comment


//
// add documentation to functions that have been previously definied

:(		@cat :delimiter @doc ." Delimiter around code that is evaluated to a single value
:[		@cat :delimiter @doc ." Delimiter around values in an array
:{		@cat :delimiter @doc ." Delimiter around key/value pairs in a map
://		@cat :delimiter @doc ." Remainder of line is ignored
:`		@cat :delimiter @doc ." Delimiter around code that may be evaluated at a later time
:.(		@cat :delimiter @doc ." Remainder of line is evaluated to a single value
:.[		@cat :delimiter @doc ." Remainder of line is values in an array
:.{		@cat :delimiter @doc ." Remainder of line is key/value pairs in a map
:.`		@cat :delimiter @doc ." Remainder of line may be evaluated at a later time
:/*		@cat :delimiter @doc ." Everything with delimiters is ignored
:"		@cat :delimiter @doc ." Delimiter around a string
:'		@cat :delimiter @doc ." Delimiter around a string
:."		@cat :delimiter @doc ." Remainder of line is a string
:.'		@cat :delimiter @doc ." Remainder of line is a string
:v=		@cat :assign    @doc ." Create a new key/value pair in the current scope
:f=		@cat :assign    @doc ." Create a new key/value pair in the current scope, like v= but functions can be overloaded
:=		@cat :assign    @doc ." Assign a value to a key
:var	@cat :assign    @doc ." Create a new variable in the current scope
:func1	@cat :function  @doc ." Define a function that takes parameters after the function name
:1func1	@cat :function  @doc ." Define a function that takes parameters before and after the function name
:1func	@cat :function	@doc ." Define a function that takes parameters before the function name
:func0	@cat :function  @doc ." Define a function that takes no parameters
:body=	@cat :function	@doc ." Remainder of line is an array of values that are put in a body
:.		@cat :access    @doc ." Access the member of a map by key or array by index
:@		@cat :metadata  @doc ." Modify a value's metadata
:.@		@cat :metadata  @doc ." Get a value's metadata
:.@@	@cat :metadata  @doc ." Get all of a value's metadata
:@doc	@cat :metadata  @doc ." Add documentation to a value

:body=	@example ." :f v= func1 ->x body= `x + 1`
:@		@example ." :a @ [ :newKey "a new value" ]
:.@		@example ." :a .@ :someKey
:.@@	@example ." :a .@@
:@doc	@example ." :a @doc "explain what :a is"

//
// additional delimiters

:[[ v= .( l3.createDelimiter .{ :end :]] :type :asEvaledArray
:[[ @cat :delimiter @doc ." Delimiter around values that are evaluated and turned in an array
:[[ @example ." [[ 1 + 2, 3 + 4 ]]

:.[[ v= .( l3.createDelimiter .{ :type :asEvaledArray
:.[[ @cat :delimiter @doc ." Remainder of line is evaluated into values in an array
:.[[ @example ." .[[ 1 + 2, 3 + 4

:delimTypes v= [ :asArray :asString :asValue :asComment :asEvaledArray :asRaw ]
:delimTypes @cat :delimiter @doc ." A list of the different kinds of delimiters

:delim v= .( [ ->end ( ->type o= delimTypes ) ] 1func1 ->pattern
	:f v= .( l3.createFunction .{ :post pattern :body body
	l3.createDelimiter .{ :end end :type type :function f
:delim @body? true @cat :delimiter @doc ." Used to create new types of delimiters
:delim @example ." :{{ v= [ :}} :asArray ] delim ->x body= .` x apply (| ## + 3 |)


//
// more function definitions


// definitions that take a pattern and one or more lines of code

:lambda v= func1 [ ->pattern ->line1 ( ->more ... ) ]
	l3.createFunction { :post pattern :body ( [ line1 ] + more ) }
:lambda	@cat :function @doc ." Creates a function where the first param is the pattern and the rest are lines in the function body
:lambda @example ." lambda [ ->x ` 2 + x ` ]

:(( v= l3.createDelimiter .{ :end :)) :type :asArray :function lambda
:((		@cat :function @doc ." Creates a function where the first param is the pattern and the rest are lines in the function body
:(( @example ." (( ->x ` 2 + x ` )) (( [ ->x ->y ] ` 2 * x + y ` ))

:.(( v= l3.createDelimiter .{ :type :asArray :function lambda
:.((	@cat :function @doc ." Remainder of line is a function where the first param is the pattern and the rest are lines in the function body
:.(( @example ." .(( [ ->x ->y ] ` 2 * x + y `


// definitions that create a prefix function, assume parameter is called ## and takes a single line of code

:lambda1 v= func1 ->line
	l3.createFunction { :post ->## :body [ line ] }
:lambda1	@cat :function @doc ." Creates a single line prefix function, assuming parameter is called ##
:lambda1 @example ." lambda1 ` 2 + ## `

:(| v= l3.createDelimiter .{ :end :|) :type :asRaw :function lambda1
:(| @cat :function @doc ." Create a single line prefix function, assuming parameter is called ##
:(| @example ." (| 2 + ## |)

:.(| v= l3.createDelimiter .{ :type :asRaw :function lambda1
:.(| @cat :function @doc ." Create a single line prefix function, assuming parameter is called ##
:.(| @example ." .(| 2 + ##


// definitions that create an infix function, assume parameters are called #1 and #2 and takes a single line of code

:lambda2 v= func1 ->line
	l3.createFunction { :pre ->#1 :post ->#2 :body [ line ] }
:lambda2	@cat :function @doc ." Create a single line infix function, assuming parameters are called #1 and #2
:lambda2 @example ." lambda2 ` #1 + #2 `

:(< v= l3.createDelimiter .{ :end :>) :type :asRaw :function lambda2
:(<		@cat :function @doc ." Create a single line infix function, assuming parameters are called #1 and #2
:(< @example ." (< #1 + #2 >)

:.(< v= l3.createDelimiter .{ :type :asRaw :function lambda2
:.(<	@cat :function @doc ." Create a single line infix function, assuming parameters are called #1 and #2
:.(< @example ." .(< #1 + #2


//
// scope

:currentScope v= func0
	l3.getScope .{ :level 1
:currentScope @cat :scope @doc ." Get a map representing the current scope

:setScopeName v= func1 ->name
	l3.getScope { :level 1 } @@ .[ :l3.scope.name name
:setScopeName @cat :scope @doc ." Assign a name to the current scope.  Useful for popping back to this scope.

:closure v= func1 ( ->key : :string )
	l3.bindFunction .{ :functionKey key :map .( l3.getScope .{ :level 1
:closure @cat :scope @doc ." Manually create a closure, binding the current scope to a function

:onExit f= func1 .( ->functionKey : :string
	l3.onScopeExit .{ :functionKey functionKey :map .( l3.getScope .{ :level 1
:onExit f= func1 .( ->line : :rawLines
	l3.onScopeExit .{ :line line :map .( l3.getScope .{ :level 1
:onExit @cat :scope @doc ." Have code get run when the current scope is exiting.  Can either be a function name or raw lines.


//
// types

:_ v= nil
:_ @doc ." Represents nil.  Useful in pattern matching for ignoring a value.


//
// debugging

:repl v= func0
	l3.repl .{ :prompt :debug> :map .( l3.getScope .{ :level 1
:repl @doc ." Starts a read-eval-print loop at the current scope

:fresh v= func1 .( ->file : :string
	l3.repl .{ :prompt :fresh> :map { } :fileToLoad file :registerBuiltins? true
:fresh @doc ." Start a read-eval-print loop with a scope that only consists of the built-in functions, then run the specified file

:timeEval v= func1 .( ->toEval : :rawLines
	:start v= l3.debug.getTicks
	l3.eval toEval
	l3.debug.getTicks - start
:timeEval @doc ." Report how many ticks it takes to eval raw lines
:timeEval @example ." timeEval `1 + 2`


//
// logic

:&? v= .(< l3.and? [ #1 #2 ]
:&? @order 5
:&? @cat :logic @doc ." Return true if both values are true

:|? v= .(< l3.or? [ #1 #2 ]
:|? @order 5
:|? @cat :logic @doc ." Return true if either value is true

:!? v= .(| l3.not? ##
:!? @cat :logic @doc ." Returns true if value is false or false if value is true

:=? v= .(< l3.equal? [ #1 #2 ]
:=? @order 4
:=? @cat :logic @doc ." Return true if two values are equal

:!=? v= .(< !? l3.equal? [ #1 #2 ]
:!=? @order 4
:!=? @cat :logic @doc ." Return true if two values are not equal

:=any? v= .( ->value 1func1 ( ->array : :array )
	l3.anyEqual? [ value array ]
:=any? @cat :logic @doc ." Return true if value is equal to anything in array
:=any? @example ." 5 =any? [3 5 7 11]


//
// arrays

:.. v= .( ( ->start : :number ) 1func1 ( ->end : :number )
	l3.createRange { :start start :end end }
:.. @cat :array @doc ." Creates an array starting with one value and ending with another
:.. @example ." 3 .. 42

:+ f= .( ->value1 1func1 ( ->array2 : :array )
	l3.combine .[ value1 array2
:+ f= .( ( ->array1 : :array ) 1func1 ->value2
	l3.combine .[ array1 value2
:+ @cat :array @doc ." Combine two arrays

:+= f= .( ( ->array : :array ) 1func1 ->value
	l3.addToArray .{ :array array :value value
:+= @order 6
:+= @cat :array @doc ." Add a value to an array

:.size v= .( ->value 1func
	l3.getCount ( value )
:.size @cat :array @doc ." Return the number of elements in a collection.

:.last v= .( ->value 1func
	value . (value .size - 1)
:.last @cat :array @doc ." Return the last element in a collection.

:apply v= .( ( ->array : :array ) 1func1 ( ->function : :function )
	l3.arrayToArray { :array array :transform function }
:apply @cat :array @doc ." Apply function to every element of a collection.  Functions for arrays take a single value.  Functions for maps are infix.  Returns the new collection.
:apply @example ." (1 .. 6) apply (| ## + 4 |)

:foldLeft f= .( ( ->array : :array ) 1func1 ( ->function : :function )
	l3.foldLeft { :array array :function function }
:foldLeft @cat :array @doc ." ((a[0] function a[1]) function a[2]) etc.  Returns a single value.
:foldLeft @example ." (1 .. 6) foldLeft (< #1 * 3 + #2 >)

:fold v= .( foldLeft

:foldRight v= .( ( ->array : :array ) 1func1 ( ->function : :function )
	l3.foldRight { :array array :function function }
:foldRight @cat :array @doc ." (a[0] function (a[1] function a[2])) etc.  Returns a single value.
:foldRight @example ." (1 .. 6) foldRight (< #1 * 3 + #2 >)

:filter v= .( ( ->array : :array ) 1func1 ( ->function : :function )
	l3.arrayToArray { :array array :filter? function }
:filter @cat :array @doc ." Returns an array consisting of every member for which function returns true
:filter @example ." array filter (| ## % 2 =? 1 |) filter (< #1 % 2 =? 1 >)

:makeArray v= func0
	:array v= [ ]
	:line forEach body
		:array = array + [ line ]
	array
:makeArray @cat :array @doc ." Make an array where every line in the body is evaluated and becomes an element in the array
:makeArray @body? true

:by v= .( ( ->a : :array ) 1func1 ( ->step : :int )
	a filter (< #1 % step =? 0 >)
:by @cat :array @doc ." Returns an array with every 'step' elements of an input array
:by @example ." (1 .. 10) by 2


//
// maps

:\/ f= .( ( ->map1 : :map ) 1func1 ( ->map2 : :map )
	l3.combine .[ map1 map2
:\/ @cat :map @doc ." Combine (union) two maps
:\/ @example ." { :a 1 :b 2 } \/ { :c 3 }

:/\ v= .( ( ->map1 : :map ) 1func1 ( ->map2 : :map )
	map1 filterMap (< map2 . #1 =? #2 >)
:/\ @cat :map @doc ." Get the intersection of two maps
:/\ @example ." { :a 1 :b 2 } \/ { :b 2 :c 3 }

:makeMap v= func0
	:map v= { }
	:submap forEachDelim [ body :{ ]
		:map = map \/ submap
	map
:makeMap @cat :map @doc ." Make a map where every line in the body is evaluated and the first element is the key and the second the value
:makeMap @body? true

:applyMap v= .( ( ->map : :map ) 1func1 ( ->transform : :function )
	l3.mapToMap { :map map :transform transform }
:applyMap @cat :map @doc ." Apply function to every value of a map.  If function is infix, it's handed key and value.  If it's prefix, it's handed the value.  Returns the new map.

:applyKeys v= .( ( ->map : :map ) 1func1 ( ->transform : :function )
	l3.mapToMap { :map map :transform transform :value? false }
:applyKeys @cat :map @doc ." Apply function to every key of a map.  If function is infix, it's handed key and value.  If it's prefix, it's handed the value.  Returns the new map.

:filterMap v= .( ( ->map : :map ) 1func1 ( ->filter? : :function )
	l3.mapToMap { :map map :filter? filter? }
:filterMap @cat :map @doc ." Returns a map consisting of every member for which function returns true

:mapToArray v= .( ( ->map : :map ) 1func1 ( ->transform : :function )
	l3.mapToArray { :map map :transform transform }
:mapToArray @cat :map @doc ." Apply function to every element of a map.  If function is infix, it's handed key and value.  If it's prefix, it's handed the value.  Returns a new array.

:filterMapToArray v= .( ( ->map : :map ) 1func1 ( ->filter? : :function )
	l3.mapToArray { :map map :filter? filter? }
:filterMapToArray @cat :map @doc ." Returns an array consisting of every value in the map for which function returns true

:filterKeysToArray v= .( ( ->map : :map ) 1func1 ( ->filter? : :function )
	l3.mapToArray { :map map :filter? filter? :value? false }
:filterKeysToArray @cat :map @doc ." Returns an array consisting of every key in the map for which function returns true


//
// raw line

:applyAs v= .( [ (->lines : :rawLine) (->delim : :string) ] 1func1 ( ->function : :function )
	:a v= [ ]
	:str forEachDelim [ lines delim ]
		a += function str
:applyAs @doc ." Apply function to every element of a body, where each line is interpreted using the given delimiter

:foldLeft f= .( ( ->lines : :rawLine ) 1func1 ( ->function : :function )
	:line forEach body
		function line

:foldAs v= .( [ (->lines : :rawLine) (->delim : :string) ] 1func1 ( ->function : :function )
	:last v= nil
	:str forEachDelim [ lines delim ]
		if last =? nil
			:last = str
		else
			:last = last function str
	last
:foldAs @doc ." Does a fold on a body where each line is interpreted using the given delimiter


//
// conditional

// ternary operator
:? f= .( ( ->do? : :bool ) 1func1 [ ->doIfTrue ->doIfFalse ]
	l3.ifValue .{ :do? do? :ifTrue doIfTrue :ifFalse doIfFalse
:? @order 4
:? @cat :if @doc ." If condition is met, return first value, else return second value

// generalized ternary-style operator
:? f= .( ( ->do? : :array ) 1func1 ( ->doIf : :array )
	:idx v= 0
	:answer v= doIf .last
	:i? forEach do?
		if i?
			:answer = doIf . idx
			break
		:idx = idx + 1
	answer

:if v= func1 ( ->do? : :bool )
	l3.ifBody .{ :do? do? :body body
	l3.setValue { :key :l3.coFunction.if.done? :value do? :level 1 }
	do?
:if @body? true
:if @order 6
:if @cat :if @doc ." If condition is met, do body

:elsif v= func1 ( ->do? : :bool )
	:doThis? v= .( ( !? l3.coFunction.if.done? ) &? do?
	l3.ifBody .{ :do? doThis? :body body
	l3.ifBody .{ :do? doThis? :body .[ .` l3.setValue .{ :key :l3.coFunction.if.done? :value true :level 1
	doThis?
:elsif @body? true
:elsif @order 6
:elsif @cat :if @doc ." If previous if and elsifs failed and this condition is met, do body

:else v= func0
	:doThis? v= .( !? l3.coFunction.if.done?
	l3.ifBody .{ :do? doThis? :body body
	doThis?
:else @body? true
:else @cat :if @doc ." If previous if and elsifs failed, do body

:match v= func1 ->l3.coFunction.match.value
	:l3.coFunction.match.done? v= false
	l3.eval body
:match @body? true @order 6
:match @cat :if @doc ." Set the seed value for picking which pattern matches a given value.  First nested 'when' that matches is run, else it runs 'default' if present.

:matchAll v= func1 ->l3.coFunction.matchAll.value
	l3.eval body
:matchAll @body? true @order 6
:matchAll @cat :if @doc ." Set the seed value for matching patterns against a given value.  Every nested 'when' that matches is run.

:when v= func1 ->pattern
	:whenBody v= body
	if ( l3.getValue { :key :l3.coFunction.matchAll.value } ) =? nil
		// goes with match
		if !? l3.coFunction.match.done?
			if l3.setValue .{ :key pattern :value l3.coFunction.match.value :returnSuccess? true
				l3.eval whenBody
				:l3.coFunction.match.done? = true
	else
		// goes with matchAll
		if l3.setValue .{ :key pattern :value l3.coFunction.matchAll.value :returnSuccess? true
			l3.eval whenBody
:when @body? true @order 6
:when @cat :if @doc ." Used inside a match or matchAll statement to check if a given pattern is a match.

:default v= func0
	:defaultBody v= body
	if !? l3.coFunction.match.done?
		l3.eval defaultBody
		:l3.coFunction.match.done? = true
:default @body? true
:default @cat :if @doc ." If no other patterns in a match statement matched, execute the default block.

:if!nil v= .( ->val 1func1 ->doIfNotNil
	var :result
	if ( val ) !=? nil
		:result = .( l3.eval doIfNotNil
	result
:if!nil @cat :if @doc ." If a value isn't nil, evaluate the following code.

:do!nil v= func1 .( ->val : :rawLines
	:theBody v= body
	:line =eachIn ( theBody )
		if ( l3.eval val ) !=? nil
			l3.eval line
:do!nil @body? true
:do!nil @cat :if @doc ." Execute each line in the body until a value evaluates as nil.


//
// loop

:while v= func1 ( ->cond : :rawLines )
	setScopeName :loop
	l3.loop .{ :check cond :body body
:while @body? true
:while @cat :loop @doc ." Repeat loop while condition is true

:repeat v= func1 .( ->n : :int
	:__i v= 0
	setScopeName :loop
	l3.loop .{ :check `__i <? n` :change `:__i = __i + 1` :body body
:repeat @body? true
:repeat @cat :loop @doc ." Repeat the body n times.

:repeatsOf v= .( ( ->n : :int ) 1func1 ( ->code : :rawLines )
	:__i v= 0
	setScopeName :loop
	l3.loop .{ :check `__i <? n` :change `:__i = __i + 1` :body code
:repeatsOf @order 5
:repeatsOf @cat :loop @doc ." Repeat a code snippet n times.

:for v= func1 .[ ->start ->cond ->change
	start
	setScopeName :loop
	l3.loop .{ :check cond :change change :body body
:for @body? true
:for @cat :loop @doc ." Call initialization code, then repeat loop while condition is true, evaluating final expression each time

:forEach v= .( ->key 1func1 ->collection
	setScopeName :loop
	l3.forEach .{ :key key :collection collection :body body
:forEach @body? true
:forEach @cat :loop @doc ." Repeat loop for each item in collection.  Pattern is specified before forEach.  Collection is specified after forEach.

:forEachDelim v= .( ->key 1func1 .[ ->collection ->delim
	setScopeName :loop
	l3.forEach .{ :key key :collection collection :body body :delim delim
:forEachDelim @body? true
:forEachDelim @cat :loop @doc ." Repeat loop for each item in collection.  Pattern is specified before forEach.  Collection is specified after forEach.  Can specify a delimiter that determines how each line is interpreted.

:break v= func0
	l3.popScope .{ :name :loop
:break @cat :loop @doc ." Pop the stack out of the current loop


//
// iterators

// function that allows for looping with an iterator
:=eachIn v= .( ->pattern 1func1 ->input
	// new scope for the iterator
	:iterScope v= l3.getScope .{ :level 1 :createChild? true
	// store body because there will be a different body inside the loop
	:eachInBody v= body
	// a simple way to execute common code before the loop and inside it
	:doIterator v= .` l3.callWithScope { :function ( iterator ) :map iterScope :next input }
	:result v= ( l3.eval doIterator )
	while .` ( result ) !=? nil
		pattern v= ( result )
		l3.eval eachInBody
		:result = ( l3.eval doIterator )
	nil
:=eachIn @body? true
:=eachIn @order 6
:=eachIn @cat :loop @doc ." Repeat loop for each item in a collection that supports an iterator.  Pattern is specified before =eachIn.  Collection is specified after =eachIn.

// specific iterator overloads

:iterator f= func1 ( ->array : :array )
	[ :__i :count ] i= [ -1 ( array .size ) ]
	:__i = __i + 1
	( __i <? count ) ? [ ` array . __i ` nil ]
:iterator @iterator
:iterator @cat :iterator @doc ." Iterate over all items in a collection.

:iterator f= func1 .[ ( ->array1 : :array ) ( ->array2 : :array )
	[ :__i :__j ] i= [ 0 -1 ]
	[ :count1 :count2 ] i= [ ( array1 .size ) ( array2 .size ) ]
	:__j = __j + 1
	if __j >=? count2
		[ :__i :__j ] = [ ( __i + 1 ) 0 ]
	( __i <? count1 ) ? [ ` [ ( array1 . __i ) ( array2 . __j ) ] ` nil ]

// todo: function overloading should give :scope precendence over :map
:iterator f= func1 ( ->scope : :scope )
	:current i= nil
	if current =? nil
		:current = scope
	else
		:current = :current .@ :l3.scope.parent
	current

:iterator f= func1 ( ->map : :map )
	[ :__i :keys ] i= [ -1 ( l3.getMapKeys map ) ]
	:count i= keys .size
	:__i = __i + 1
	:result v= nil
	if __i <? count
		:key v= keys . __i
		:result = [ key ( map . key ) ]
	result

:iterator f= func1 ( ->f : :function )
	[ :__i :count ] i= [ -1 ( ( f ) .size ) ]
	:__i = __i + 1
	( __i <? count ) ? [ ( ( f ) . __i ) nil ]

:iterator f= func1 ( ->lines : :rawLines )
	[ :__i :count ] i= [ -1 ( lines .size ) ]
	:__i = __i + 1
	( __i <? count ) ? [ ` lines . __i ` nil ]

:iterator f= func1 ( ->lines : :rawLine )
	[ :__i :count ] i= [ -1 ( lines .size ) ]
	:__i = __i + 1
	( __i <? count ) ? [ ` lines . __i ` nil ]


//
// strings

:=>str v= .( ->val 1func
	l3.toString ( val )
:=>str @order 2
:=>str @cat :string @doc ." Convert a value to a string

:=>array v= .( ( ->val : :string ) 1func
	l3.stringToArray ( val )
:=>array @order 2
:=>array @cat :string @doc ." Convert a string to an array of single character strings

:$ v= func1 ->val
	l3.toString ( val )
:$ @order 2 @cat :string @doc ." Converts the next value to a string.

:+ f= .( ( ->str1 : :string ) 1func1 ( ->str2 : :string )
	l3.stringConcat .{ :array .[ str1 str2
:+ @cat :string @doc ." Concatenate two strings

:+= f= .( ( ->key : :string ) 1func1 ->value
	key = l3.stringConcat .{ :array .[ ( l3.eval key ) .( $ value
:+= @order 6
:+= @cat :array @doc ." Add a value to an array

:* f= .( ( ->str : :string ) 1func1 ( ->n : :number )
	:all v= ""
	n repeatsOf .` :all = all + str
:* @order 2
:* @cat :string @doc ." Repeat a string n times.

:--" v= func0
	:list v= [ ]
	:str forEachDelim [ body :" ]
		list += str
	l3.stringConcat .{ :array list :spaces 1
:--" @body? true
:--" @cat :string @doc --"
	Use the indented lines following this function as a single string.
	Useful for long strings such as @doc.

:-"[ v= l3.createDelimiter .{ :end :] :type :asArray :function (( :a ` a fold (< $ #1 + $ #2 >) ` ))
:-"[ @cat :string @doc ." Each item in array is converted to a string and concatenated together

:.-"[ v= l3.createDelimiter .{ :type :asArray :function (( :a ` a fold (< $ #1 + $ #2 >) ` ))
:.-"[ @cat :string @doc ." Each item in array is converted to a string and concatenated together

:--"+ v= func1 ( ->separator : :string )
	[ body :" ] applyAs (| ## |) +with separator
:--"+ @body? true @cat :string @doc --"
	Combine the indented lines following this function into a string
	separated by the given string

:+with v= .( ( ->arr : :array ) 1func1 ( ->separator : :string )
	l3.stringConcat .{ :array arr :separator separator
:+with @cat :string @doc ." Concatenate the strings in an array, with a separator between the items

:stringify v= func1 .( ->separator : :string
	:list v= [ ]
	:line forEach body
		list += ( line ) =>str
	l3.stringConcat .{ :array list :separator separator
:stringify @body? true
:stringify @cat :string @doc ." Concatenate each line into a string, with a separator between the items

:\n v= l3.intToChar 13
:\n @cat :string @doc ." Represents a newline in a string

:\t v= l3.intToChar 9
:\t @cat :string @doc ." Represents a tab in a string


//
// enumerated type

:=enum v= .( ( ->name : :string ) 1func1 ( ->array : :array )
	:list v= { }
	:__i v= 0
	:val forEach array
		:key v= name + "." + val
		// metadata on the value describing enum name & key
		__i @@ [ :l3.value.type name ]
		__i @@ [ :l3.enum.key key ]
		:list = list \/ { key __i }
		// store enum key/value on scope that called this function
		l3.setValue { :key key :value __i :level 3 }
		:__i = __i + 1
	// store entire map on scope that called this function
	:value v= l3.setValue { :key name :value list :level 1 }
	// metadata on the enum
	value @@ [ :l3.value.type "enum" ]
	list
:=enum @cat :enum @doc ." Create an enumerated map of values


//
// math

:+ f= .( ( ->a : :number ) 1func1 ( ->b : :number )
	l3.add [ a b ]
:+ @cat :math @doc ." Add two numbers

:- f= .(< l3.subtract [ #1 #2 ]
:- @cat :math @doc ." Subtract one number from another

:* f= .( ( ->a : :number ) 1func1 ( ->b : :number )
	l3.multiply [ a b ]
:* @order 2
:* @cat :math @doc ." Multiply two numbers

:/ v= .(< l3.divide [ #1 #2 ]
:/ @order 2
:/ @cat :math @doc ." Divide the first number by the second number

:% v= .(< l3.modulo [ #1 #2 ]
:% @order 2
:% @cat :math @doc ." First number modulo the second number

:sqrt v= .(| l3.sqrt ##
:sqrt @cat :math @doc ." Compute the square root of a number

:++ v= .( ( ->## : :string ) 1func
	## = (l3.eval ##) + 1
:++ @cat :math @doc ." Increment the value stored by a key

:-- v= .( ( ->## : :string ) 1func
	## = (l3.eval ##) - 1
:-- @cat :math @doc ." Decrement the value stored by a key

:<? v= .(< l3.lt [ #1 #2 ]
:<? @cat :math @doc ." True if a < b

:<=? v= .(< l3.lt [ #1 #2 ] |? #1 =? #2
:<=? @cat :math @doc ." True if a <= b

:>? v= .(< l3.gt [ #1 #2 ]
:>? @cat :math @doc ." True if a > b

:>=? v= .(< l3.gt [ #1 #2 ] |? #1 =? #2
:>=? @cat :math @doc ." True if a >= b

:min v= .(< ( #1 <? #2 ) ? [ #1 #2 ]
:min @cat :math @doc ." Returns the smallest of two values.

:max v= .(< ( #1 >? #2 ) ? [ #1 #2 ]
:max @cat :math @doc ." Returns the largest of two values.


//
// exceptions

:try v= func0
	// name the scope so exceptions in body will continue after the body
	setScopeName :l3.catch
	// variable used for communication between try-catch-endTry blocks
	l3.setValue { :key :l3.coFunction.catch.done? :value false :level 1 }
	l3.eval body
:try @body? true
:try @cat :exception @doc ." Start a code block where exceptions can be caught.  Used with catch and endtry.

:catch v= func1 ->pattern
	:catchBody v= body
	// see if there was an exception thrown
	if ( l3.getValue { :key :l3.exception } ) =? nil
		:l3.coFunction.catch.done? = true
	// if we have an exception to catch, see if it's expected pattern
	if !? l3.coFunction.catch.done?
		:do? v= l3.setValue .{ :key pattern :value l3.exception :returnSuccess? true
		if do?
			l3.eval catchBody
			:l3.coFunction.catch.done? = true
:catch @body? true @order 5
:catch @cat :exception @doc ." After a try, can be used to catch exceptions that match a given pattern.

:endTry v= func0
	if !? l3.coFunction.catch.done?
		rethrow
	if ( l3.getValue { :key :l3.exception } ) !=? nil
		:l3.exception = nil
	true
:endTry @cat :exception @doc ." Ends try-catch blocks.  If exception wasn't caught, it gets rethrown.

:rethrow v= func0
	if l3.exception !=? nil
		l3.throw l3.exception
:rethrow @cat :exception @doc ." Rethrows the current exception, if any.


//
// modules

:import v= func1 ( ->file : :string )
	l3.loadModule { :file file :scope "parent" }
:import @cat :module @doc ." Run the code from the given file.  Don't run if file has already been imported.

:reimport v= func1 ( ->file : :string )
	l3.loadModule { :file file :scope "parent" :force? true }
:reimport @cat :module @doc ." Run the code from the given file.  Reload even if module has been imported before.


//
// I/O

:print v= .(| l3.print .{ :value ##
:print @order 6
:print @cat :io @doc ." Print a value as a string


//
// classes

:public v= func0
	:map v= { }
	// body consists of keys with functions as values
	:line forEach body
		match line
			when .( ->key : :string
				if l3.getType { :key key } =? :function
					// add function as a closure over the current scope
					:map = map \/ { key ( closure key ) }
					// if it's a function with no parameters, force it to eval when used.
					// todo: it would be better if this decision could be based on the context
					//   in which it's used, rather than being a property of the function
					( map . key ) @@ .[ :l3.func.forceEval? true
				else
					:map = map \/ { key ( l3.eval key ) }
			when .( ->m : :map
				:map = map \/ m
	map
:public @cat :class @doc ." Creates a map of functions that are bound to the local scope given a list of function names
:public @body? true
