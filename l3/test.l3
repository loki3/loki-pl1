
var :fizzBuzz1 = [ ]
var :i forEach ( 1 .. 20 )
	if ( i % 15 =? 0 )
		fizzBuzz1 += "fizzbuzz"
	elsif .( i % 3 =? 0
		fizzBuzz1 += "fizz"
	elsif .( i % 5 =? 0
		fizzBuzz1 += "buzz"
	else
		fizzBuzz1 += i
:fizzBuzz1 @doc ." fizzbuzz using a simple loop

var :fizzBuzz2 = [ ]
var :i forEach ( 1 .. 20 )
	[ :str1 :fizz? ] v= ( i % 3 =? 0 ) ? .[ [ :fizz true ] [ "" false ]
	[ :str2 :buzz? ] v= ( i % 5 =? 0 ) ? .[ [ :buzz true ] [ "" false ]
	fizzBuzz2 += .( ( fizz? |? buzz? ) ? .[ ( str1 + str2 ) i
:fizzBuzz2 @doc ." fizzbuzz using multiple return values

var :fizzbuzz3 = func0
	var :zzz = [ ]
	var :i forEach ( 1 .. 20 )
		if ( i % 15 =? 0 )
			zzz += ." fizzbuzz
		elsif .( i % 3 =? 0
			zzz += ." fizz
		elsif .( i % 5 =? 0
			zzz += ." buzz
		else
			zzz += i
	zzz
:fizzbuzz3 @doc ." fizzbuzz using a function in a simple loop

var :fizzbuzz4 v= ( 1 .. 20 ) apply (| [ (## % 15 =? 0) (## % 3 =? 0) (## % 5 =? 0) ] ? [ :fizzbuzz :fizz :buzz ## ] |)
:fizzbuzz4 @doc ." fizzbuzz in a single line


//
// complex numbers

:i v= .( ->y 1func
	{ :x 0 :y y }
:i @order 1
:i @doc ." Creates a complex number

:+ f= ( { :x ->x1 :y ->y1 } 1func1 { :x ->x2 :y ->y2 } )
	{ :x ( x1 + x2 ) :y ( y1 + y2 ) }
:+ f= ( { :x ->x1 :y ->y1 } 1func1 ( ->x2 : :number ) )
	{ :x ( x1 + x2 ) :y y1 }
:+ f= ( ( ->x1 : :number ) 1func1 { :x ->x2 :y ->y2 } )
	{ :x ( x1 + x2 ) :y y2 }
:+ @doc ." Adds together two complex numbers of the form { :x # :y # }

:* f= ( { :x ->x1 :y ->y1 } 1func1 { :x ->x2 :y ->y2 } )
	{ :x ( x1 * x2 - y1 * y2 ) :y ( x1 * y2 + x2 * y1 ) }
:* @doc ." Multiplies together two complex numbers of the form { :x # :y # }


//
// an enum representing the days of the week

:days =enum .[ :sunday :monday :tuesday :wednesday :thursday :friday :saturday
:days @doc ." an enum representing the days of the week

:isWeekend v= func1 ( ->day : :days )
	( day =? days.sunday ) |? ( day =? days.saturday )
:isWeekend @doc ." true if the day is Saturday or Sunday


//
// a mechanism for defining a function recursively but having it execute iteratively

:recurse v= func1 [ ->a ->f ]
	while ` nil !=? f `
		[ :a :f ] = f [ a ]
	a
:recurse @doc --"
	Turns a recursive function into an interative loop.
	The passed function must take an iteration value and a result value
	and return a new result and a partial function bound to the next
	iteration value but still requiring the result value.
	When the computation is finished, the returned function should be nil.

:! v= .( ->n 1func
	:fact v= func1 [ ->a ->b ]
		( a >? 0 ) ? .[ [ (a * b) ( fact [ (a - 1) ] ) ]  [b nil]
	recurse [ 1 ( fact [ n ] ) ]
:! @order 2
:! @doc ." Factorial operator defined recursively but executed iteratively


// simple factorial
:!2 v= ( ->n 1func )
	( n <? 1 ) ? .[ 1 .` ( 1 .. n ) fold (< #1 * #2 >)
:!2 @doc ." Factorial operator using a functional pattern

:!3 f= (0 1func)
	1
:!3 f= (->n 1func)
	n * ( (n - 1) !3 )
:!3 @doc ." Factorial using pattern matching and recursion


//
// Fibonacci numbers

:fib1 v= func1 ->n
	[ :f1 :f2 ] v= [ 1 1 ]
	if n >? 1
		:i forEach ( 2 .. n )
			[ :f1 :f2 ] = [ f2 ( f1 + f2 ) ]
	f2
:fib1 @doc ." Iterative computation of Fibonacci numbers

:fib2 v= func1 ->n
	:sub v= func1 .[ ->f1 ->f2 ->i
		( i =? n ) ? .[ f2 .` sub .[ f2 ( f1 + f2 ) ( i + 1 )
	sub .[ 0 1 0
:fib2 @doc ." Recursive computation of Fibonacci numbers


//
// Units

:unitsType =enum [ :distance :weight ]
:unitsType @doc ." A list of the different types of supported units


:defineUnits v= func1 .[ ->baseUnit ->type
	[:units :name :scale] forEachDelim .[ body :[
		:asUnits v= .( ( ->x : :number ) 1func
			{ baseUnit ( x * scale ) :units type }
		:asUnits @order 1 @doc .( "Used to specify the number of " + name
		
		:toUnits v= .( { baseUnit ->baseUnits :units type } 1func
			baseUnits / scale
		:toUnits @doc .( "Convert current units into " + name
		
		// inject functions at scope of defineUnits call, closed over current scope
		l3.setValue { :key units :value ( closure :asUnits ) :level 3 }
		l3.setValue { :key ( :=> + units ) :value ( closure :toUnits ) :level 3 }
	
	// define addition and subtraction within this set of units
	:plus v= .( { baseUnit ->x :units type } 1func1 { baseUnit ->y :units type }
		{ baseUnit ( x + y ) :units type }
	:minus v= .( { baseUnit ->x :units type } 1func1 { baseUnit ->y :units type }
		{ baseUnit ( x - y ) :units type }
	// inject functions at scope of defineUnits call, closed over current scope
	l3.setValue { :key :+ :value ( closure :plus ) :level 2 :overload? true }
	l3.setValue { :key :- :value ( closure :minus ) :level 2 :overload? true }
:defineUnits @body? true
:defineUnits @doc --"
	Create functions for dealing with units.
	Values passed to function define the name of the base units and the type of units.
	Each line in the body describes a particular measurement and contains
	the short name to use in function names, the full name to use in documentation,
	and the factor to multiply against to convert to the base units.

defineUnits .[ :meters unitsType.distance
	:mm  :millimeters 0.001
	:m   :meters      1
	:in  :inches      0.0254
	:ft  :feet        (0.0254 * 12)

defineUnits .[ :grams unitsType.weight
	:g   :grams       1
	:kg  :kilograms	  1000.0
	:oz  :ounces	  28.349523125
	:lb  :pounds	  453.59237
