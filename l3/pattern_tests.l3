// tests of various uses of patterns

:assignmentSingle v= func()
	// single item
	:a v= 5
	5 assert=? a
	:a v= { :a 1 :b 2 }
	{ :a 1 :b 2 } assert=? a
	:a v= [ 1 2 :str ]
	[ 1 2 :str ] assert=? a
:assignmentSingle @doc """
	Test how assignment uses pattern matching for assignment of a single variable

:assignmentArray v= func()
	// simple array
	[ :a :b :c ] v= [ 1 2 3 ]
	[ 1 2 3 ] assert=? [ a b c ]
	
	// types
	[ ( :a : :int ) ( :b : :bool ) ( :c : :string ) ] v= [ 3 false :asdf ]
	[ 3 false :asdf ] assert=? [ a b c ]
	// fail
	// todo: this shouldn't fail silently
	[ ( :a : :int ) ( :b : :bool ) ] v= [ 4.0 :asdf ]
	[ 3 false ] assert=? [ a b ]
	
	// rest of array
	[ :a :b ( :c ... ) ] v= [ 1 2 3 4 5 6 ]
	[ 1 2 [ 3 4 5 6 ] ] assert=? [ a b c ]
	
	// default
	[ :a :b ( :c @@default 5 ) ] v= [ 1 2 3 ]
	[ 1 2 3 ] assert=? [ a b c ]
	[ :a :b ( :c @@default 5 ) ] v= [ 7 8 ]
	[ 7 8 5 ] assert=? [ a b c ]
	
	// when one value is a direct match rather than a variable
	[ :a 2 ] v= [ 5 2 ]
	5 assert=? a
	// non match
	[ :a 2 ] v= [ 2 5 ]
	5 assert=? a
	
	// subpattern
	[ :a { :b ->c } ] v= [ 11 { :b 22 } ]
	11 assert=? a
	22 assert=? c
:assignmentArray @doc """
	Test how assignment uses pattern matching for assignment into an array

:assignmentMap v= func()
	// if it finds :a, put value in :c, same with { :b :d }
	{ :a :c :b :d } v= { :a 1 :b 2 }
	[ 1 2 ] assert=? [ c d ]
	
	// search for keys specified in array
	[ :a :c ] v= { :a 1 :b 2 :c 3 }
	[ 1 3 ] assert=? [ a c ]
	
	// remainder in map
	{ :a :b :whatever ( :rest ... ) } v= { :a 5 :b 6 :c 7 }
	[ 5 { :b 6 :c 7 } ] assert=? [ b rest ]
	// remainder in array
	[ :a ( :rest ... ) ] v= { :a 3 :b 4 :c 5 }
	[ 3 { :b 4 :c 5 } ] assert=? [ a rest ]
	
	// default
	[ :a ( :b @@default 4 ) ] v= { :a 1 :b 2 }
	[ 1 2 ] assert=? [ a b ]
	[ :a ( :b @@default 4 ) ] v= { :a 6 :c 7 }
	[ 6 4 ] assert=? [ a b ]
	
	// when one value is a direct match rather than a variable
	{ :a :c :b 2 } v= { :a 1 :b 2 }
	1 assert=? c
	// non match
	{ :a :c :b 2 } v= { :a 5 :b 6 }
	1 assert=? c
	
	// subpattern
	{ :a ->b :c { :e ->f } } v= { :a 11 :c { :e 22 } }
	11 assert=? b
	22 assert=? f
	{ :a ->b :c [ ->d ->e ] } v= { :a -1 :c [ -2 -3 ] }
	-1 assert=? b
	-2 assert=? d
	-3 assert=? e
:assignmentMap @doc """
	Test how assignment uses pattern matching for assignment of a map


:assignmentHasKeys v= func()
	// array
	// keys are present
	[ :a ( :b @@hasKeys [ :k1 :k2 ] ) ] v= { :a 2 :b { :k1 7 :k2 8 :k3 9 } }
	2 assert=? a
	{ :k1 7 :k2 8 :k3 9 } assert=? b
	
	// keys aren't present
	// todo: this shouldn't fail silently
	[ :a ( :b @@hasKeys [ :k1 :k2 ] ) ] v= { :a 3 :b { :k4 7 :k5 8 :k3 9 } }
	2 assert=? a
	{ :k1 7 :k2 8 :k3 9 } assert=? b
	
	// map
	// keys are present
	:map v= { :k1 -1 :k2 -2 }
	[ :a ( :b @@hasKeys map ) ] v= { :a 1 :b { :k1 2 :k2 3 :k3 4 } }
	1 assert=? a
	{ :k1 2 :k2 3 :k3 4 } assert=? b
	
	// keys aren't present
	// todo: this shouldn't fail silently
	[ :a ( :b @@hasKeys map ) ] v= { :a 3 :b { :k4 7 :k5 8 :k3 9 } }
	1 assert=? a
	{ :k1 2 :k2 3 :k3 4 } assert=? b
	
	// string
	// key is present
	:map v= { :k1 -1 :k2 -2 }
	[ :a ( :b @@hasKeys :k2 ) ] v= { :a 2 :b { :k1 3 :k2 4 :k3 5 } }
	2 assert=? a
	{ :k1 3 :k2 4 :k3 5 } assert=? b
	
	// keys aren't present
	// todo: this shouldn't fail silently
	[ :a ( :b @@hasKeys :k2 ) ] v= { :a 3 :b { :k4 7 :k5 8 :k3 9 } }
	2 assert=? a
	{ :k1 3 :k2 4 :k3 5 } assert=? b
:assignmentHasKeys @doc """
	Test requiring that a map should contain certain keys in order to pattern match
